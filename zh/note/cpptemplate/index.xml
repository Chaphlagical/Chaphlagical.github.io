<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>C&#43;&#43; Templates on Chaf&#39;s Blog</title>
    <link>https://chaphlagical.github.io/zh/note/cpptemplate/</link>
    <description>Recent content in C&#43;&#43; Templates on Chaf&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>chaf@mail.ustc.edu.cn (Wenbo Chen)</managingEditor>
    <webMaster>chaf@mail.ustc.edu.cn (Wenbo Chen)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 15 Nov 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://chaphlagical.github.io/zh/note/cpptemplate/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Appendix B: Value Categories</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/appendixb/</link>
        <pubDate>Tue, 24 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Tue, 24 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/appendixb/</guid>
        <description>B.1 Traditional Lvalues and Rvalues 传统意义上值分为两种：左值和右值 左值是指代存储于内存或寄存器的实际的值的表达式，比如左值x的x是一个变量的名字 左值是可修改的，允许</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Chapter 6: Move Semantics and enable_if&lt;&gt;</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/ch6/</link>
        <pubDate>Mon, 23 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Mon, 23 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/ch6/</guid>
        <description>移动语义是C++11标准中的一个重要特性，通过移动语义能够优化复制和构造操作，使内容从原对象移动到目标对象，而不是直接复制 6.1 Perfect Forwarding 假设现在需要</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Chapter 5: Tricky Basics</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/ch5/</link>
        <pubDate>Fri, 20 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Fri, 20 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/ch5/</guid>
        <description>5.1 Keyword typename 关键词typename用于指明模板中的一个标识符是一个类型。例如： 1 2 3 4 5 6 7 8 template&amp;lt;typename T&amp;gt; class MyClass{ public: ... void foo(){ typename T::SubType* ptr; } } 这里SubType是类T中</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Appendix E: Concepts</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/appendixe/</link>
        <pubDate>Thu, 19 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Thu, 19 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/appendixe/</guid>
        <description>E.1 Using Concepts E.1.1 Dealing with Requirements 为模板函数添加约束： 1 2 3 4 5 template&amp;lt;typename T&amp;gt; requires LessThanComparable&amp;lt;T&amp;gt; T max(T a, T b) { return b &amp;lt; a? a: b; } concept是一个常量表达式的布尔断言，在编译期运行 模板只有</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Chapter 3: Nontype Template Parameters</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/ch3/</link>
        <pubDate>Thu, 19 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Thu, 19 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/ch3/</guid>
        <description>3.1 Nontype Class Template Parameters 设计一个指定存储大小的栈： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include &amp;lt;array&amp;gt;#include &amp;lt;cassert&amp;gt; template&amp;lt;typename T, std::size_t Maxsize&amp;gt; class Stack{ private: std::array&amp;lt;T, maxSize&amp;gt; elems; std::size_t numElems; public: Stack(); void push(T const&amp;amp; elem); void pop(); T const&amp;amp; top() const; bool empty() const{</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Chapter 4: Variadic Templates</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/ch4/</link>
        <pubDate>Thu, 19 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Thu, 19 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/ch4/</guid>
        <description>4.1 Variadic Templates 类模板形参能够被定义为可以接受一串模板实参，称为可变参数模板 4.1.1 Variadic Templates by Example 举例： 1 2 3 4 5 6 7 8 9 10 11 void print() { } template&amp;lt;typename T, typename... Types&amp;gt; void print(T firstArg, Types... args) { std::cout &amp;lt;&amp;lt; firstArg &amp;lt;&amp;lt;</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Chapter 2: Class Templates</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/ch2/</link>
        <pubDate>Wed, 18 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Wed, 18 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/ch2/</guid>
        <description>2.1 Implementation of Class Template Stack 2.1.1 Declaration of Class Templates 声明一个类模板： 1 2 3 4 template&amp;lt;typename T&amp;gt; class Stack{ ... }; 模板形参T`可以在类中使用： 1 2 3 4 5 6 7 8 9 10 11 12 template&amp;lt;typename T&amp;gt; class Stack{ private: std::vector&amp;lt;T&amp;gt; elems; public: void push(T const&amp;amp; elem); void pop(); T</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      
      <item>
        <title>Chapter 1: Function Templates</title>
        <link>https://chaphlagical.github.io/zh/note/cpptemplate/ch1/</link>
        <pubDate>Sun, 15 Nov 2020 15:56:11 +0100</pubDate>
        <author>chaf@mail.ustc.edu.cn (Wenbo Chen)</author>
        <atom:modified>Sun, 15 Nov 2020 15:56:11 +0100</atom:modified>
        <guid>https://chaphlagical.github.io/zh/note/cpptemplate/ch1/</guid>
        <description>1.1 A First Look at Function Templates 1.1.1 Defining The Templates 模板声明为： 1 template&amp;lt;形参列表&amp;gt; 例如： 1 2 3 4 5 6 // max1.hpp template&amp;lt;typename T&amp;gt; T max(T a, T b) { return b &amp;lt; a ? a : b; } 也可以用</description>
        
        <dc:creator>Wenbo Chen</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43; Templates</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>Note</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>